type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/GameStatus.java
  visible: true
  text: |
    package battleship;

    public enum GameStatus {
        PREGAME,
        GAME,
        END
    }
  learner_created: true
- name: src/battleship/ShipType.java
  visible: true
  text: |
    package battleship;

    public enum ShipType {
        AIRCRAFT("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        final String shipName;
        final int shipLength;

        ShipType(String shipName, int shipLength) {
            this.shipName = shipName;
            this.shipLength = shipLength;
        }

        public String getShipName() {
            return shipName;
        }

        public int getShipLength() {
            return shipLength;
        }
    }
  learner_created: true
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    import javax.management.remote.JMXConnectionNotification;
    import java.util.Arrays;
    import java.util.Scanner;

    public class Board {

        // ~ - a miss
        // o - your ship
        // x - hit ship
        // M - a miss

        String[][] prepBoard; //Shows all ships
        String[][] gameBoard; //Fog until a missile hit
        Ship[] ships;
        int shipCount;

        public Board() {

            //We initialize the both matrix with the fog.
            this.prepBoard = new String[10][10];
            this.gameBoard = new String[10][10];

            for (int i = 0; i < prepBoard.length; i++) {
                for (int j = 0; j < prepBoard.length; j++) {
                    prepBoard[i][j] = gameBoard[i][j] = "~";
                }
            }
            this.ships = new Ship[5];
            shipCount = 0;
        }

        public void outputBoard(GameStatus status) {
            //Output the empty corner
            System.out.print(" ");

            //The columns
            for (int i = 1; i <= prepBoard.length; i++) {
                System.out.print(" " + i);
            }
            System.out.print("\n");

            //Output the current table
            for (int i = 0; i < prepBoard.length; i++) {
                //The lines
                System.out.print((char) (i + 65));
                for (int j = 0; j < prepBoard[i].length; j++) {

                    //We check the game status
                    switch (status) {
                        case PREGAME:
                            System.out.print(" " + prepBoard[i][j]);
                            break;
                        case GAME:
                            System.out.print(" " + gameBoard[i][j]);
                            break;
                    }

                }
                System.out.print("\n");
            }
        }

        public void addShip(ShipType ship) {
            Scanner scanner = new Scanner(System.in);
            String input = new String();
            int[] xCoords = new int[2];
            int[] yCoords = new int[2];

            boolean errorHappened = false;

            //We get the coords of the Ship to verify if it is valid
            System.out.println("Enter the coordinates of the " + ship.getShipName() + " (" + ship.getShipLength() + " cells):");
            do {
                for (int i = 0; i < 2; i++) {
                    errorHappened = false;

                    if (scanner.hasNext()) {
                        input = scanner.next();
                    } else {
                        errorHappened = true;
                    }
                    input = input.toUpperCase();

                    xCoords[i] = input.charAt(0) - 65;
                    if (input.length() == 2 && Character.isDigit(input.charAt(1))) {
                        yCoords[i] = Integer.parseInt(input.substring(1,2)) - 1;
                    } else if (input.length() == 3 && Character.isDigit(input.charAt(1)) && Character.isDigit(input.charAt(2))) {
                        yCoords[i] = Integer.parseInt(input.substring(1,3)) - 1;
                    } else {
                        errorHappened = true;
                        break;
                    }
                }
                if (!errorHappened) {
                    errorHappened = !checkShip(xCoords, yCoords, ship.getShipName(), ship.getShipLength());
                } else {
                    System.out.println("Error! Invalid information. Try again:");
                }
                scanner.nextLine();

            } while (errorHappened);

            ships[shipCount++] = new Ship(ship.getShipName(), ship.getShipLength(), xCoords, yCoords);
            drawShip(xCoords, yCoords);
        }

        private void drawShip(int[] xCoords, int[] yCoords) {
            for (int i = xCoords[0]; i <= xCoords[1]; i++) {
                for (int j = yCoords[0]; j <= yCoords[1]; j++) {
                    prepBoard[i][j] = "o";
                }
            }
        }

        private boolean checkShip(int[] xCoords, int[] yCoords, String shipName, int expectedLength) {
            //We check if we have at least 2 points where 2 ships may interact. If true, then it means those 2 are too close to eachother.
            int incorrectPos = 0;

            //We order the coords in case the ships were placed the other way around
            Arrays.sort(xCoords);
            Arrays.sort(yCoords);

            for (int i = 0; i < 2; i++) {
                if (xCoords[i] >= 10 || xCoords[i] < 0 || yCoords[i] >= 10 || yCoords[i] < 0) {
                    System.out.println("Error! Wrong location! Try again:");
                    return false;
                }
            }

            if (Math.abs(xCoords[0] - xCoords[1]) + 1 != expectedLength && Math.abs(yCoords[0] - yCoords[1]) + 1 != expectedLength) {
                System.out.println("Error! Wrong length of the " + shipName + "! Try again:");
                return false;
            }
            if (xCoords[0] != xCoords[1] && yCoords[0] != yCoords[1]) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;
            }

            for (int i = 0; i < shipCount; i++) {
                incorrectPos = 0;

                int[] placedShipxCoords = ships[i].getxPos();
                int[] placedShipyCoords = ships[i].getyPos();

                Arrays.sort(placedShipxCoords);
                placedShipxCoords[0] -= 1;
                placedShipxCoords[1] += 1;

                Arrays.sort(placedShipyCoords);
                placedShipyCoords[0] -= 1;
                placedShipyCoords[1] += 1;

                if (xCoords[0] == xCoords[1]) {
                    if (xCoords[0] >= placedShipxCoords[0] && xCoords[1] <= placedShipxCoords[1]) {
                        incorrectPos++;
                    }
                    incorrectPos = getIncorrectPos(yCoords, incorrectPos, placedShipyCoords);

                } else if (yCoords[0] == yCoords[1]) {
                    if (yCoords[0] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                        incorrectPos++;
                    }
                    incorrectPos = getIncorrectPos(xCoords, incorrectPos, placedShipxCoords);
                }

                if (incorrectPos >= 2) {
                    System.out.println("Error! You placed it too close to another one, Try again:");
                    return false;
                }
            }

            return true;
        }

        public Message takeShot() {
            Scanner scanner = new Scanner(System.in);
            int targetxCoord, targetyCoord;

            System.out.println("Take a shot!");

            String input = scanner.next();
            input = input.toUpperCase();

            if (input.length() == 2 && Character.isDigit(input.charAt(1))) {
                targetxCoord = input.charAt(0) - 65;
                targetyCoord = Integer.parseInt(input.substring(1, 2)) - 1;
            } else if (input.length() == 3 && Character.isDigit(input.charAt(1)) && Character.isDigit(input.charAt(2))) {
                targetxCoord = input.charAt(0) - 65;
                targetyCoord = Integer.parseInt(input.substring(1, 3)) - 1;
            } else {
                return Message.ERR_INV_INF;
            }

            if (targetxCoord >= 10 || targetxCoord < 0 || targetyCoord >= 10 || targetyCoord < 0) {
                return Message.ERR_WRNG_COORDS;
            } /*else if (gameBoard[targetxCoord][targetyCoord] != "~") {
                return Message.ERR_ALR_HIT;
            } */else if (prepBoard[targetxCoord][targetyCoord] == "o") {
                gameBoard[targetxCoord][targetyCoord] = "X";
                outputBoard(GameStatus.GAME);

                for (Ship s : ships
                ) {
                    if (s.isSunk()) continue;
                    if (s.checkHit(targetxCoord, targetyCoord)) {
                        if (s.isSunk()) {
                            shipCount--;
                            if (shipCount == 0) {
                                return Message.ALL_SHIP_SUNK;
                            }
                            return Message.SHIP_SUNK;
                        }
                    }
                }
                return Message.SHIP_HIT;
            } else {
                gameBoard[targetxCoord][targetyCoord] = "M";
                outputBoard(GameStatus.GAME);

                return Message.MISS;
            }
        }

        private int getIncorrectPos(int[] yCoords, int incorrectPos, int[] placedShipyCoords) {
            if (yCoords[0] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                incorrectPos++;
            } else if (yCoords[1] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                incorrectPos++;
            } else if (placedShipyCoords[0] >= yCoords[0] && placedShipyCoords[0] <= yCoords[1]) {
                incorrectPos++;
            } else if (placedShipyCoords[1] >= yCoords[0] && placedShipyCoords[1] <= yCoords[1]) {
                incorrectPos++;
            }
            return incorrectPos;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;

    public class Ship {

        private int length;
        private String name;
        private int[] xPos;
        private int[] yPos;
        private boolean sunk;
        private int placesHit;


        public Ship(String name, int length, int[] xPos, int[] yPos) {
            this.name = name;
            this.length = length;
            this.xPos = new int[2];
            this.yPos = new int[2];
            this.xPos = Arrays.copyOf(xPos, xPos.length);
            this.yPos = Arrays.copyOf(yPos, yPos.length);
            this.sunk = false;
            this.placesHit = 0;
        }

        public int getStartxPos() {
            return xPos[0];
        }

        public int getEndxPos() {
            return xPos[1];
        }

        public int getStartyPos() {
            return yPos[0];
        }

        public int getEndyPos() {
            return yPos[1];
        }

        public int[] getxPos() {
            return Arrays.copyOf(xPos, xPos.length);
        }

        public boolean isSunk() {
            return sunk;
        }

        public int[] getyPos() {
            return Arrays.copyOf(yPos, yPos.length);
        }

        public void setSunk(boolean sunk) {
            this.sunk = sunk;
        }

        public boolean checkHit(int xTarget, int yTarget) {
            Arrays.sort(this.xPos);
            Arrays.sort(this.yPos);
            if (xTarget >= this.xPos[0] && xTarget <= this.xPos[1] &&
                    yTarget >= this.yPos[0] && yTarget <= yPos[1]) {
                placesHit++;

                //We check if the whole ship was shot down;
                if (placesHit == length) {
                    setSunk(true);
                }
                return true;
            }
            return false;
        }

    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        private Board board1, board2;
        private GameStatus gameStatus;

        private final ShipType[] placeableShips = {ShipType.AIRCRAFT, ShipType.BATTLESHIP, ShipType.SUBMARINE, ShipType.CRUISER, ShipType.DESTROYER};
        ;


        public Game() {
            this.board1 = new Board();
            this.board2 = new Board();
            gameStatus = GameStatus.PREGAME;
        }

        public void prepareGame() {

            for (ShipType s : placeableShips
            ) {
                board1.outputBoard(gameStatus);
                board1.addShip(s);
            }
            board1.outputBoard(gameStatus);

            //Move to next stage
            startGame();
        }

        private void startGame() {
            gameStatus = GameStatus.GAME;
            System.out.println("The game starts!");
            board1.outputBoard(gameStatus);

            while (gameStatus != GameStatus.END) {
               Message msg = board1.takeShot();
               if (msg == Message.ALL_SHIP_SUNK) {
                   gameStatus = GameStatus.END;
               }
                System.out.println(msg.getMessage());
            }
        }

    }
  learner_created: true
- name: src/battleship/Message.java
  visible: true
  text: |
    package battleship;

    public enum Message {
        SHIP_HIT("You hit a ship! Try again:"),
        SHIP_SUNK("You sank a ship! Specify a new target:"),
        ALL_SHIP_SUNK("You sank the last ship. You won. Congratulations!"),
        MISS("You missed. Try again:"),
        ERR_WRNG_COORDS("Error! You entered the wrong coordinates! Try again:"),
        ERR_INV_INF("Error! Invalid information. Try again:"),
        ERR_ALR_HIT("Error! You already shot in those coordinates! Try again:");

        private String message;

        Message(String message) {
            this.message = message;
        }

        public String getMessage() {
            return this.message;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/667/implement">JetBrains
    Academy</a>
  time: Sun, 13 Dec 2020 16:48:22 UTC
record: -1
