type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import battleship.Main;
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {

        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "x"}, {"E4", "m"},
                {"B9", "x"}, {"C9", "x"}, {"D9", "x"}, {"E9", "m"}, {"F3", "x"}, {"F4", "x"},
                {"F5", "x"}, {"F6", "x"}, {"F7", "x"}, {"F10", "m"}, {"G8", "m"}, {"G5", "m"},
                {"H2", "m"}, {"I2", "x"}, {"J2", "x"}, {"J6", "m"}, {"J8", "x"}, {"J9", "x"}, {"J10", "x"}
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test() {

            TestedProgram main = new TestedProgram(Main.class);
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("Your program didn't print a massage about game start");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = validateShots(main, new String[][]{
                {"A1", "x"}, {"A2", "m"}, {"B1", "x"}, {"C1", "x"}, {"D1", "m"}, {"F5", "m"},
                {"B5", "x"}, {"B4", "m"}, {"C5", "x"}, {"H8", "m"}, {"F8", "x"}, {"G8", "m"},
                {"E8", "x"}, {"D8", "x"}, {"C8", "x"}, {"D8", "x"}, {"I9", "m"}, {"H1", "x"},
                {"I1", "m"}, {"H2", "x"}, {"H3", "x"}, {"E2", "m"}, {"I8", "m"}, {"J7", "x"},
                {"J8", "m"}, {"J6", "x"}, {"J5", "x"}, {"J4", "x"}, {"J3", "x"},
            });

            if (!output.toLowerCase().contains("you sank the last ship")) {
                return CheckResult.wrong("At the end of the game, your program should print a congratulatory message to the winner:" +
                    " You sank the last ship. You won. Congratulations!");
            }

            if (!main.isFinished()) {
                return CheckResult.wrong("The game didn't stop after all ships were sank.");
            }

            return CheckResult.correct();
        }


        String validateShots(TestedProgram main, String[][] commands) {

            String output = null;

            for (String[] item : commands) {
                output = main.execute(item[0]);
                if (item[1].equals("x")) {
                    if (!checkShot(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected hit in " + item[0]);
                    }
                }
                if (item[1].equals("m")) {
                    if (!checkMissing(getFieldMatrix(output), item[0])) {
                        throw new WrongAnswer("Expected miss in " + item[0]);
                    }
                }
            }

            return output;
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        boolean checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x");
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }
    }
  learner_created: false
- name: src/battleship/GameStatus.java
  visible: true
  text: |
    package battleship;

    public enum GameStatus {
        PREGAME,
        GAME,
        END
    }
  learner_created: true
- name: src/battleship/ShipType.java
  visible: true
  text: |
    package battleship;

    public enum ShipType {
        AIRCRAFT("Aircraft Carrier", 5),
        BATTLESHIP("Battleship", 4),
        SUBMARINE("Submarine", 3),
        CRUISER("Cruiser", 3),
        DESTROYER("Destroyer", 2);

        final String shipName;
        final int shipLength;

        ShipType(String shipName, int shipLength) {
            this.shipName = shipName;
            this.shipLength = shipLength;
        }

        public String getShipName() {
            return shipName;
        }

        public int getShipLength() {
            return shipLength;
        }
    }
  learner_created: true
- name: src/battleship/Board.java
  visible: true
  text: |
    package battleship;

    import javax.management.remote.JMXConnectionNotification;
    import java.util.Arrays;
    import java.util.Scanner;

    public class Board {

        // ~ - a miss
        // o - your ship
        // x - hit ship
        // M - a miss

        String[][] prepBoard; //Shows all ships
        String[][] gameBoard; //Fog until a missile hit
        Ship[] ships;
        int shipCount;

        public Board() {

            //We initialize the both matrix with the fog.
            this.prepBoard = new String[10][10];
            this.gameBoard = new String[10][10];

            for (int i = 0; i < prepBoard.length; i++) {
                for (int j = 0; j < prepBoard.length; j++) {
                    prepBoard[i][j] = gameBoard[i][j] = "~";
                }
            }
            this.ships = new Ship[5];
            shipCount = 0;
        }

        public void outputBoard(GameStatus status) {
            //Output the empty corner
            System.out.print(" ");

            //The columns
            for (int i = 1; i <= prepBoard.length; i++) {
                System.out.print(" " + i);
            }
            System.out.print("\n");

            //Output the current table
            for (int i = 0; i < prepBoard.length; i++) {
                //The lines
                System.out.print((char) (i + 65));
                for (int j = 0; j < prepBoard[i].length; j++) {

                    //We check the game status
                    switch (status) {
                        case PREGAME:
                            System.out.print(" " + prepBoard[i][j]);
                            break;
                        case GAME:
                            System.out.print(" " + gameBoard[i][j]);
                            break;
                    }

                }
                System.out.print("\n");
            }
        }

        public void addShip(ShipType ship) {
            Scanner scanner = new Scanner(System.in);
            String input = new String();
            int[] xCoords = new int[2];
            int[] yCoords = new int[2];

            //We get the coords of the Ship to verify if it is valid
            System.out.println("Enter the coordinates of the " + ship.getShipName() + " (" + ship.getShipLength() + " cells):");
            do {

                for (int i = 0; i < 2; i++) {
                    input = scanner.next();
                    input = input.toUpperCase();

                    xCoords[i] = input.charAt(0) - 65;
                    yCoords[i] = Integer.parseInt(input.substring(1)) - 1;
                }

            } while (!checkShip(xCoords, yCoords, ship.getShipName(), ship.getShipLength()));

            ships[shipCount++] = new Ship(ship.getShipName(), ship.getShipLength(), xCoords, yCoords);
            drawShip(xCoords, yCoords);
        }

        private void drawShip(int[] xCoords, int[] yCoords) {
            for (int i = xCoords[0]; i <= xCoords[1]; i++) {
                for (int j = yCoords[0]; j <= yCoords[1]; j++) {
                    prepBoard[i][j] = "o";
                }
            }
        }

        private boolean checkShip(int[] xCoords, int[] yCoords, String shipName, int expectedLength) {
            //We check if we have at least 2 points where 2 ships may interact. If true, then it means those 2 are too close to eachother.
            int incorrectPos = 0;

            //We order the coords in case the ships were placed the other way around
            Arrays.sort(xCoords);
            Arrays.sort(yCoords);

            for (int i = 0; i < 2; i++) {
                if (xCoords[i] >= 10 || xCoords[i] < 0 || yCoords[i] >= 10 || yCoords[i] < 0) {
                    System.out.println("Error! Wrong location! Try again:");
                    return false;
                }
            }

            if (Math.abs(xCoords[0] - xCoords[1]) + 1 != expectedLength && Math.abs(yCoords[0] - yCoords[1]) + 1 != expectedLength) {
                System.out.println("Error! Wrong length of the " + shipName + "! Try again:");
                return false;
            }
            if (xCoords[0] != xCoords[1] && yCoords[0] != yCoords[1]) {
                System.out.println("Error! Wrong ship location! Try again:");
                return false;
            }

            for (int i = 0; i < shipCount; i++) {
                incorrectPos = 0;

                int[] placedShipxCoords = ships[i].getxPos();
                int[] placedShipyCoords = ships[i].getyPos();

                Arrays.sort(placedShipxCoords);
                placedShipxCoords[0] -= 1;
                placedShipxCoords[1] += 1;

                Arrays.sort(placedShipyCoords);
                placedShipyCoords[0] -= 1;
                placedShipyCoords[1] += 1;

                if (xCoords[0] == xCoords[1]) {
                    if (xCoords[0] >= placedShipxCoords[0] && xCoords[1] <= placedShipxCoords[1]) {
                        incorrectPos++;
                    }
                    incorrectPos = getIncorrectPos(yCoords, incorrectPos, placedShipyCoords);

                } else if (yCoords[0] == yCoords[1]) {
                    if (yCoords[0] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                        incorrectPos++;
                    }
                    incorrectPos = getIncorrectPos(xCoords, incorrectPos, placedShipxCoords);
                }

                if (incorrectPos >= 2) {
                    System.out.println("Error! You placed it too close to another one, Try again:");
                    return false;
                }
            }

            return true;
        }

        public boolean takeShot() {
            Scanner scanner = new Scanner(System.in);
            int targetxCoord, targetyCoord;

            System.out.println("Take a shot!");

            String input = scanner.next();
            input = input.toUpperCase();

            targetxCoord = input.charAt(0) - 65;
            targetyCoord = Integer.parseInt(input.substring(1)) - 1;

            if (targetxCoord >= 10 || targetxCoord < 0 || targetyCoord >= 10 || targetyCoord < 0) {
                System.out.println("Error! You entered the wrong coordinates! Try again:");
                return false;
            } else if (prepBoard[targetxCoord][targetyCoord] == "o") {
                gameBoard[targetxCoord][targetyCoord] = "X";
                prepBoard[targetxCoord][targetyCoord] = "X";
                outputBoard(GameStatus.GAME);

                System.out.println("You hit a ship!");

                outputBoard(GameStatus.PREGAME);
            } else {
                gameBoard[targetxCoord][targetyCoord] = "M";
                prepBoard[targetxCoord][targetyCoord] = "M";
                outputBoard(GameStatus.GAME);

                System.out.println("You missed!");

                outputBoard(GameStatus.PREGAME);
            }
            return true;
        }

        private int getIncorrectPos(int[] yCoords, int incorrectPos, int[] placedShipyCoords) {
            if (yCoords[0] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                incorrectPos++;
            } else if (yCoords[1] >= placedShipyCoords[0] && yCoords[1] <= placedShipyCoords[1]) {
                incorrectPos++;
            } else if (placedShipyCoords[0] >= yCoords[0] && placedShipyCoords[0] <= yCoords[1]) {
                incorrectPos++;
            } else if (placedShipyCoords[1] >= yCoords[0] && placedShipyCoords[1] <= yCoords[1]) {
                incorrectPos++;
            }
            return incorrectPos;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    import java.util.Arrays;

    public class Ship {

        private int length = 0;
        private String name;
        private int[] xPos;
        private int[] yPos;


        public Ship(String name, int length, int[] xPos, int[] yPos) {
            this.name = name;
            this.length = length;
            this.xPos = new int[2];
            this.yPos = new int[2];
            this.xPos = Arrays.copyOf(xPos, xPos.length);
            this.yPos = Arrays.copyOf(yPos, yPos.length);
        }

        public int getStartxPos() {
            return xPos[0];
        }

        public int getEndxPos() {
            return xPos[1];
        }

        public int getStartyPos() {
            return yPos[0];
        }

        public int getEndyPos() {
            return yPos[1];
        }

        public int[] getxPos() {
            return Arrays.copyOf(xPos,xPos.length);
        }

        public int[] getyPos() {
            return Arrays.copyOf(yPos,yPos.length);
        }
    }
  learner_created: true
- name: src/battleship/Game.java
  visible: true
  text: |
    package battleship;

    import java.util.Scanner;

    public class Game {
        private Board board1, board2;
        private GameStatus gameStatus;

        private final ShipType[] placeableShips = {ShipType.AIRCRAFT, ShipType.BATTLESHIP, ShipType.SUBMARINE, ShipType.CRUISER, ShipType.DESTROYER};;


        public Game() {
            this.board1 = new Board();
            this.board2 = new Board();
            gameStatus = GameStatus.PREGAME;
        }

        public void beginGame() {

            for (ShipType s : placeableShips
                 ) {
                board1.outputBoard(gameStatus);
                board1.addShip(s);
            }
            board1.outputBoard(gameStatus);

            //Move to next stage
            startGame();
        }

        private void startGame() {
            gameStatus = GameStatus.GAME;
            System.out.println("The game starts!");
            board1.outputBoard(gameStatus);

            while(gameStatus != GameStatus.END) {
                if(board1.takeShot()) {
                    gameStatus = GameStatus.END;
                }
            }
        }

    }
  learner_created: true
- name: src/battleship/Message.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/666/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/125/stages/666/implement">JetBrains
    Academy</a>
  time: Fri, 11 Dec 2020 15:40:53 UTC
record: -1
